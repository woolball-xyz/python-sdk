# coding: utf-8

"""
    Woolball AI Network API

    **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TextGenerationRequestContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'model': 'str',
        'input': 'str',
        'top_k': 'int',
        'top_p': 'float',
        'temperature': 'float',
        'repetition_penalty': 'float',
        'dtype': 'str',
        'max_length': 'int',
        'max_new_tokens': 'int',
        'min_length': 'int',
        'min_new_tokens': 'int',
        'do_sample': 'bool',
        'num_beams': 'int',
        'no_repeat_ngram_size': 'int',
        'context_window_size': 'int',
        'sliding_window_size': 'int',
        'attention_sink_size': 'int',
        'frequency_penalty': 'float',
        'presence_penalty': 'float',
        'bos_token_id': 'int',
        'max_tokens': 'int',
        'random_seed': 'int'
    }

    attribute_map = {
        'provider': 'provider',
        'model': 'model',
        'input': 'input',
        'top_k': 'top_k',
        'top_p': 'top_p',
        'temperature': 'temperature',
        'repetition_penalty': 'repetition_penalty',
        'dtype': 'dtype',
        'max_length': 'max_length',
        'max_new_tokens': 'max_new_tokens',
        'min_length': 'min_length',
        'min_new_tokens': 'min_new_tokens',
        'do_sample': 'do_sample',
        'num_beams': 'num_beams',
        'no_repeat_ngram_size': 'no_repeat_ngram_size',
        'context_window_size': 'context_window_size',
        'sliding_window_size': 'sliding_window_size',
        'attention_sink_size': 'attention_sink_size',
        'frequency_penalty': 'frequency_penalty',
        'presence_penalty': 'presence_penalty',
        'bos_token_id': 'bos_token_id',
        'max_tokens': 'max_tokens',
        'random_seed': 'random_seed'
    }

    def __init__(self, provider=None, model=None, input=None, top_k=None, top_p=None, temperature=None, repetition_penalty=None, dtype=None, max_length=None, max_new_tokens=None, min_length=None, min_new_tokens=None, do_sample=None, num_beams=None, no_repeat_ngram_size=None, context_window_size=None, sliding_window_size=None, attention_sink_size=None, frequency_penalty=None, presence_penalty=None, bos_token_id=None, max_tokens=None, random_seed=None):  # noqa: E501
        """TextGenerationRequestContract - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._model = None
        self._input = None
        self._top_k = None
        self._top_p = None
        self._temperature = None
        self._repetition_penalty = None
        self._dtype = None
        self._max_length = None
        self._max_new_tokens = None
        self._min_length = None
        self._min_new_tokens = None
        self._do_sample = None
        self._num_beams = None
        self._no_repeat_ngram_size = None
        self._context_window_size = None
        self._sliding_window_size = None
        self._attention_sink_size = None
        self._frequency_penalty = None
        self._presence_penalty = None
        self._bos_token_id = None
        self._max_tokens = None
        self._random_seed = None
        self.discriminator = None
        self.provider = provider
        self.model = model
        self.input = input
        if top_k is not None:
            self.top_k = top_k
        if top_p is not None:
            self.top_p = top_p
        if temperature is not None:
            self.temperature = temperature
        if repetition_penalty is not None:
            self.repetition_penalty = repetition_penalty
        if dtype is not None:
            self.dtype = dtype
        if max_length is not None:
            self.max_length = max_length
        if max_new_tokens is not None:
            self.max_new_tokens = max_new_tokens
        if min_length is not None:
            self.min_length = min_length
        if min_new_tokens is not None:
            self.min_new_tokens = min_new_tokens
        if do_sample is not None:
            self.do_sample = do_sample
        if num_beams is not None:
            self.num_beams = num_beams
        if no_repeat_ngram_size is not None:
            self.no_repeat_ngram_size = no_repeat_ngram_size
        if context_window_size is not None:
            self.context_window_size = context_window_size
        if sliding_window_size is not None:
            self.sliding_window_size = sliding_window_size
        if attention_sink_size is not None:
            self.attention_sink_size = attention_sink_size
        if frequency_penalty is not None:
            self.frequency_penalty = frequency_penalty
        if presence_penalty is not None:
            self.presence_penalty = presence_penalty
        if bos_token_id is not None:
            self.bos_token_id = bos_token_id
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if random_seed is not None:
            self.random_seed = random_seed

    @property
    def provider(self):
        """Gets the provider of this TextGenerationRequestContract.  # noqa: E501

        The AI provider to use  # noqa: E501

        :return: The provider of this TextGenerationRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TextGenerationRequestContract.

        The AI provider to use  # noqa: E501

        :param provider: The provider of this TextGenerationRequestContract.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["transformers", "webllm", "mediapipe"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def model(self):
        """Gets the model of this TextGenerationRequestContract.  # noqa: E501

        The AI model to use for processing  # noqa: E501

        :return: The model of this TextGenerationRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TextGenerationRequestContract.

        The AI model to use for processing  # noqa: E501

        :param model: The model of this TextGenerationRequestContract.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def input(self):
        """Gets the input of this TextGenerationRequestContract.  # noqa: E501

        Input text or messages for generation  # noqa: E501

        :return: The input of this TextGenerationRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this TextGenerationRequestContract.

        Input text or messages for generation  # noqa: E501

        :param input: The input of this TextGenerationRequestContract.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def top_k(self):
        """Gets the top_k of this TextGenerationRequestContract.  # noqa: E501

        The number of highest probability vocabulary tokens to keep for top-k-filtering  # noqa: E501

        :return: The top_k of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this TextGenerationRequestContract.

        The number of highest probability vocabulary tokens to keep for top-k-filtering  # noqa: E501

        :param top_k: The top_k of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._top_k = top_k

    @property
    def top_p(self):
        """Gets the top_p of this TextGenerationRequestContract.  # noqa: E501

        If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to top_p or higher are kept for generation  # noqa: E501

        :return: The top_p of this TextGenerationRequestContract.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this TextGenerationRequestContract.

        If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to top_p or higher are kept for generation  # noqa: E501

        :param top_p: The top_p of this TextGenerationRequestContract.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def temperature(self):
        """Gets the temperature of this TextGenerationRequestContract.  # noqa: E501

        The value used to modulate the next token probabilities  # noqa: E501

        :return: The temperature of this TextGenerationRequestContract.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this TextGenerationRequestContract.

        The value used to modulate the next token probabilities  # noqa: E501

        :param temperature: The temperature of this TextGenerationRequestContract.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def repetition_penalty(self):
        """Gets the repetition_penalty of this TextGenerationRequestContract.  # noqa: E501

        Parameter for repetition penalty. 1.0 means no penalty  # noqa: E501

        :return: The repetition_penalty of this TextGenerationRequestContract.  # noqa: E501
        :rtype: float
        """
        return self._repetition_penalty

    @repetition_penalty.setter
    def repetition_penalty(self, repetition_penalty):
        """Sets the repetition_penalty of this TextGenerationRequestContract.

        Parameter for repetition penalty. 1.0 means no penalty  # noqa: E501

        :param repetition_penalty: The repetition_penalty of this TextGenerationRequestContract.  # noqa: E501
        :type: float
        """

        self._repetition_penalty = repetition_penalty

    @property
    def dtype(self):
        """Gets the dtype of this TextGenerationRequestContract.  # noqa: E501

        Quantization level (e.g., 'fp16', 'q4', 'q8') - Transformers only  # noqa: E501

        :return: The dtype of this TextGenerationRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this TextGenerationRequestContract.

        Quantization level (e.g., 'fp16', 'q4', 'q8') - Transformers only  # noqa: E501

        :param dtype: The dtype of this TextGenerationRequestContract.  # noqa: E501
        :type: str
        """

        self._dtype = dtype

    @property
    def max_length(self):
        """Gets the max_length of this TextGenerationRequestContract.  # noqa: E501

        Maximum length the generated tokens can have - Transformers only  # noqa: E501

        :return: The max_length of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TextGenerationRequestContract.

        Maximum length the generated tokens can have - Transformers only  # noqa: E501

        :param max_length: The max_length of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def max_new_tokens(self):
        """Gets the max_new_tokens of this TextGenerationRequestContract.  # noqa: E501

        Maximum number of tokens to generate - Transformers only  # noqa: E501

        :return: The max_new_tokens of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._max_new_tokens

    @max_new_tokens.setter
    def max_new_tokens(self, max_new_tokens):
        """Sets the max_new_tokens of this TextGenerationRequestContract.

        Maximum number of tokens to generate - Transformers only  # noqa: E501

        :param max_new_tokens: The max_new_tokens of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._max_new_tokens = max_new_tokens

    @property
    def min_length(self):
        """Gets the min_length of this TextGenerationRequestContract.  # noqa: E501

        Minimum length of the sequence to be generated - Transformers only  # noqa: E501

        :return: The min_length of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this TextGenerationRequestContract.

        Minimum length of the sequence to be generated - Transformers only  # noqa: E501

        :param min_length: The min_length of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def min_new_tokens(self):
        """Gets the min_new_tokens of this TextGenerationRequestContract.  # noqa: E501

        Minimum numbers of tokens to generate - Transformers only  # noqa: E501

        :return: The min_new_tokens of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._min_new_tokens

    @min_new_tokens.setter
    def min_new_tokens(self, min_new_tokens):
        """Sets the min_new_tokens of this TextGenerationRequestContract.

        Minimum numbers of tokens to generate - Transformers only  # noqa: E501

        :param min_new_tokens: The min_new_tokens of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._min_new_tokens = min_new_tokens

    @property
    def do_sample(self):
        """Gets the do_sample of this TextGenerationRequestContract.  # noqa: E501

        Whether to use sampling - Transformers only  # noqa: E501

        :return: The do_sample of this TextGenerationRequestContract.  # noqa: E501
        :rtype: bool
        """
        return self._do_sample

    @do_sample.setter
    def do_sample(self, do_sample):
        """Sets the do_sample of this TextGenerationRequestContract.

        Whether to use sampling - Transformers only  # noqa: E501

        :param do_sample: The do_sample of this TextGenerationRequestContract.  # noqa: E501
        :type: bool
        """

        self._do_sample = do_sample

    @property
    def num_beams(self):
        """Gets the num_beams of this TextGenerationRequestContract.  # noqa: E501

        Number of beams for beam search - Transformers only  # noqa: E501

        :return: The num_beams of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._num_beams

    @num_beams.setter
    def num_beams(self, num_beams):
        """Sets the num_beams of this TextGenerationRequestContract.

        Number of beams for beam search - Transformers only  # noqa: E501

        :param num_beams: The num_beams of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._num_beams = num_beams

    @property
    def no_repeat_ngram_size(self):
        """Gets the no_repeat_ngram_size of this TextGenerationRequestContract.  # noqa: E501

        If > 0, all ngrams of that size can only occur once - Transformers only  # noqa: E501

        :return: The no_repeat_ngram_size of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._no_repeat_ngram_size

    @no_repeat_ngram_size.setter
    def no_repeat_ngram_size(self, no_repeat_ngram_size):
        """Sets the no_repeat_ngram_size of this TextGenerationRequestContract.

        If > 0, all ngrams of that size can only occur once - Transformers only  # noqa: E501

        :param no_repeat_ngram_size: The no_repeat_ngram_size of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._no_repeat_ngram_size = no_repeat_ngram_size

    @property
    def context_window_size(self):
        """Gets the context_window_size of this TextGenerationRequestContract.  # noqa: E501

        Size of the context window for the model - WebLLM only  # noqa: E501

        :return: The context_window_size of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._context_window_size

    @context_window_size.setter
    def context_window_size(self, context_window_size):
        """Sets the context_window_size of this TextGenerationRequestContract.

        Size of the context window for the model - WebLLM only  # noqa: E501

        :param context_window_size: The context_window_size of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._context_window_size = context_window_size

    @property
    def sliding_window_size(self):
        """Gets the sliding_window_size of this TextGenerationRequestContract.  # noqa: E501

        Size of the sliding window for attention - WebLLM only  # noqa: E501

        :return: The sliding_window_size of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._sliding_window_size

    @sliding_window_size.setter
    def sliding_window_size(self, sliding_window_size):
        """Sets the sliding_window_size of this TextGenerationRequestContract.

        Size of the sliding window for attention - WebLLM only  # noqa: E501

        :param sliding_window_size: The sliding_window_size of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._sliding_window_size = sliding_window_size

    @property
    def attention_sink_size(self):
        """Gets the attention_sink_size of this TextGenerationRequestContract.  # noqa: E501

        Size of the attention sink - WebLLM only  # noqa: E501

        :return: The attention_sink_size of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._attention_sink_size

    @attention_sink_size.setter
    def attention_sink_size(self, attention_sink_size):
        """Sets the attention_sink_size of this TextGenerationRequestContract.

        Size of the attention sink - WebLLM only  # noqa: E501

        :param attention_sink_size: The attention_sink_size of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._attention_sink_size = attention_sink_size

    @property
    def frequency_penalty(self):
        """Gets the frequency_penalty of this TextGenerationRequestContract.  # noqa: E501

        Penalty for token frequency - WebLLM only  # noqa: E501

        :return: The frequency_penalty of this TextGenerationRequestContract.  # noqa: E501
        :rtype: float
        """
        return self._frequency_penalty

    @frequency_penalty.setter
    def frequency_penalty(self, frequency_penalty):
        """Sets the frequency_penalty of this TextGenerationRequestContract.

        Penalty for token frequency - WebLLM only  # noqa: E501

        :param frequency_penalty: The frequency_penalty of this TextGenerationRequestContract.  # noqa: E501
        :type: float
        """

        self._frequency_penalty = frequency_penalty

    @property
    def presence_penalty(self):
        """Gets the presence_penalty of this TextGenerationRequestContract.  # noqa: E501

        Penalty for token presence - WebLLM only  # noqa: E501

        :return: The presence_penalty of this TextGenerationRequestContract.  # noqa: E501
        :rtype: float
        """
        return self._presence_penalty

    @presence_penalty.setter
    def presence_penalty(self, presence_penalty):
        """Sets the presence_penalty of this TextGenerationRequestContract.

        Penalty for token presence - WebLLM only  # noqa: E501

        :param presence_penalty: The presence_penalty of this TextGenerationRequestContract.  # noqa: E501
        :type: float
        """

        self._presence_penalty = presence_penalty

    @property
    def bos_token_id(self):
        """Gets the bos_token_id of this TextGenerationRequestContract.  # noqa: E501

        Beginning of sequence token ID - WebLLM only  # noqa: E501

        :return: The bos_token_id of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._bos_token_id

    @bos_token_id.setter
    def bos_token_id(self, bos_token_id):
        """Sets the bos_token_id of this TextGenerationRequestContract.

        Beginning of sequence token ID - WebLLM only  # noqa: E501

        :param bos_token_id: The bos_token_id of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._bos_token_id = bos_token_id

    @property
    def max_tokens(self):
        """Gets the max_tokens of this TextGenerationRequestContract.  # noqa: E501

        Maximum number of tokens to generate - MediaPipe only  # noqa: E501

        :return: The max_tokens of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this TextGenerationRequestContract.

        Maximum number of tokens to generate - MediaPipe only  # noqa: E501

        :param max_tokens: The max_tokens of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def random_seed(self):
        """Gets the random_seed of this TextGenerationRequestContract.  # noqa: E501

        Random seed for reproducible results - MediaPipe only  # noqa: E501

        :return: The random_seed of this TextGenerationRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this TextGenerationRequestContract.

        Random seed for reproducible results - MediaPipe only  # noqa: E501

        :param random_seed: The random_seed of this TextGenerationRequestContract.  # noqa: E501
        :type: int
        """

        self._random_seed = random_seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextGenerationRequestContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextGenerationRequestContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
