# coding: utf-8

"""
    Woolball AI Network API

    **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpeechToTextRequestContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'dtype': 'str',
        'input': 'OneOfSpeechToTextRequestContractInput',
        'return_timestamps': 'str',
        'stream': 'bool',
        'chunk_length_s': 'int',
        'stride_length_s': 'int',
        'force_full_sequences': 'bool',
        'language': 'str',
        'task': 'str',
        'num_frames': 'int'
    }

    attribute_map = {
        'model': 'model',
        'dtype': 'dtype',
        'input': 'input',
        'return_timestamps': 'return_timestamps',
        'stream': 'stream',
        'chunk_length_s': 'chunk_length_s',
        'stride_length_s': 'stride_length_s',
        'force_full_sequences': 'force_full_sequences',
        'language': 'language',
        'task': 'task',
        'num_frames': 'num_frames'
    }

    def __init__(self, model=None, dtype=None, input=None, return_timestamps=None, stream=None, chunk_length_s=None, stride_length_s=None, force_full_sequences=None, language=None, task=None, num_frames=None):  # noqa: E501
        """SpeechToTextRequestContract - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._dtype = None
        self._input = None
        self._return_timestamps = None
        self._stream = None
        self._chunk_length_s = None
        self._stride_length_s = None
        self._force_full_sequences = None
        self._language = None
        self._task = None
        self._num_frames = None
        self.discriminator = None
        self.model = model
        self.dtype = dtype
        self.input = input
        if return_timestamps is not None:
            self.return_timestamps = return_timestamps
        if stream is not None:
            self.stream = stream
        if chunk_length_s is not None:
            self.chunk_length_s = chunk_length_s
        if stride_length_s is not None:
            self.stride_length_s = stride_length_s
        if force_full_sequences is not None:
            self.force_full_sequences = force_full_sequences
        if language is not None:
            self.language = language
        if task is not None:
            self.task = task
        if num_frames is not None:
            self.num_frames = num_frames

    @property
    def model(self):
        """Gets the model of this SpeechToTextRequestContract.  # noqa: E501


        :return: The model of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SpeechToTextRequestContract.


        :param model: The model of this SpeechToTextRequestContract.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def dtype(self):
        """Gets the dtype of this SpeechToTextRequestContract.  # noqa: E501


        :return: The dtype of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this SpeechToTextRequestContract.


        :param dtype: The dtype of this SpeechToTextRequestContract.  # noqa: E501
        :type: str
        """
        if dtype is None:
            raise ValueError("Invalid value for `dtype`, must not be `None`")  # noqa: E501

        self._dtype = dtype

    @property
    def input(self):
        """Gets the input of this SpeechToTextRequestContract.  # noqa: E501


        :return: The input of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: OneOfSpeechToTextRequestContractInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this SpeechToTextRequestContract.


        :param input: The input of this SpeechToTextRequestContract.  # noqa: E501
        :type: OneOfSpeechToTextRequestContractInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def return_timestamps(self):
        """Gets the return_timestamps of this SpeechToTextRequestContract.  # noqa: E501


        :return: The return_timestamps of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._return_timestamps

    @return_timestamps.setter
    def return_timestamps(self, return_timestamps):
        """Sets the return_timestamps of this SpeechToTextRequestContract.


        :param return_timestamps: The return_timestamps of this SpeechToTextRequestContract.  # noqa: E501
        :type: str
        """

        self._return_timestamps = return_timestamps

    @property
    def stream(self):
        """Gets the stream of this SpeechToTextRequestContract.  # noqa: E501


        :return: The stream of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this SpeechToTextRequestContract.


        :param stream: The stream of this SpeechToTextRequestContract.  # noqa: E501
        :type: bool
        """

        self._stream = stream

    @property
    def chunk_length_s(self):
        """Gets the chunk_length_s of this SpeechToTextRequestContract.  # noqa: E501


        :return: The chunk_length_s of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._chunk_length_s

    @chunk_length_s.setter
    def chunk_length_s(self, chunk_length_s):
        """Sets the chunk_length_s of this SpeechToTextRequestContract.


        :param chunk_length_s: The chunk_length_s of this SpeechToTextRequestContract.  # noqa: E501
        :type: int
        """

        self._chunk_length_s = chunk_length_s

    @property
    def stride_length_s(self):
        """Gets the stride_length_s of this SpeechToTextRequestContract.  # noqa: E501


        :return: The stride_length_s of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._stride_length_s

    @stride_length_s.setter
    def stride_length_s(self, stride_length_s):
        """Sets the stride_length_s of this SpeechToTextRequestContract.


        :param stride_length_s: The stride_length_s of this SpeechToTextRequestContract.  # noqa: E501
        :type: int
        """

        self._stride_length_s = stride_length_s

    @property
    def force_full_sequences(self):
        """Gets the force_full_sequences of this SpeechToTextRequestContract.  # noqa: E501


        :return: The force_full_sequences of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: bool
        """
        return self._force_full_sequences

    @force_full_sequences.setter
    def force_full_sequences(self, force_full_sequences):
        """Sets the force_full_sequences of this SpeechToTextRequestContract.


        :param force_full_sequences: The force_full_sequences of this SpeechToTextRequestContract.  # noqa: E501
        :type: bool
        """

        self._force_full_sequences = force_full_sequences

    @property
    def language(self):
        """Gets the language of this SpeechToTextRequestContract.  # noqa: E501


        :return: The language of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SpeechToTextRequestContract.


        :param language: The language of this SpeechToTextRequestContract.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def task(self):
        """Gets the task of this SpeechToTextRequestContract.  # noqa: E501


        :return: The task of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this SpeechToTextRequestContract.


        :param task: The task of this SpeechToTextRequestContract.  # noqa: E501
        :type: str
        """

        self._task = task

    @property
    def num_frames(self):
        """Gets the num_frames of this SpeechToTextRequestContract.  # noqa: E501


        :return: The num_frames of this SpeechToTextRequestContract.  # noqa: E501
        :rtype: int
        """
        return self._num_frames

    @num_frames.setter
    def num_frames(self, num_frames):
        """Sets the num_frames of this SpeechToTextRequestContract.


        :param num_frames: The num_frames of this SpeechToTextRequestContract.  # noqa: E501
        :type: int
        """

        self._num_frames = num_frames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpeechToTextRequestContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpeechToTextRequestContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
