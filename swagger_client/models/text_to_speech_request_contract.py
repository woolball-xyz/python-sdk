# coding: utf-8

"""
    Woolball AI Network API

    **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TextToSpeechRequestContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'dtype': 'str',
        'input': 'str',
        'voice': 'str',
        'stream': 'bool'
    }

    attribute_map = {
        'model': 'model',
        'dtype': 'dtype',
        'input': 'input',
        'voice': 'voice',
        'stream': 'stream'
    }

    def __init__(self, model=None, dtype=None, input=None, voice=None, stream=None):  # noqa: E501
        """TextToSpeechRequestContract - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._dtype = None
        self._input = None
        self._voice = None
        self._stream = None
        self.discriminator = None
        self.model = model
        self.dtype = dtype
        self.input = input
        if voice is not None:
            self.voice = voice
        if stream is not None:
            self.stream = stream

    @property
    def model(self):
        """Gets the model of this TextToSpeechRequestContract.  # noqa: E501


        :return: The model of this TextToSpeechRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TextToSpeechRequestContract.


        :param model: The model of this TextToSpeechRequestContract.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def dtype(self):
        """Gets the dtype of this TextToSpeechRequestContract.  # noqa: E501


        :return: The dtype of this TextToSpeechRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this TextToSpeechRequestContract.


        :param dtype: The dtype of this TextToSpeechRequestContract.  # noqa: E501
        :type: str
        """
        if dtype is None:
            raise ValueError("Invalid value for `dtype`, must not be `None`")  # noqa: E501

        self._dtype = dtype

    @property
    def input(self):
        """Gets the input of this TextToSpeechRequestContract.  # noqa: E501


        :return: The input of this TextToSpeechRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this TextToSpeechRequestContract.


        :param input: The input of this TextToSpeechRequestContract.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def voice(self):
        """Gets the voice of this TextToSpeechRequestContract.  # noqa: E501


        :return: The voice of this TextToSpeechRequestContract.  # noqa: E501
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this TextToSpeechRequestContract.


        :param voice: The voice of this TextToSpeechRequestContract.  # noqa: E501
        :type: str
        """

        self._voice = voice

    @property
    def stream(self):
        """Gets the stream of this TextToSpeechRequestContract.  # noqa: E501


        :return: The stream of this TextToSpeechRequestContract.  # noqa: E501
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this TextToSpeechRequestContract.


        :param stream: The stream of this TextToSpeechRequestContract.  # noqa: E501
        :type: bool
        """

        self._stream = stream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextToSpeechRequestContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextToSpeechRequestContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
