# coding: utf-8

"""
    Woolball AI Network API

    **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TranslationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def translation(self, model, dtype, input, src_lang, tgt_lang, **kwargs):  # noqa: E501
        """Translation  # noqa: E501

        Translate text between 200+ languages using NLLB models. Uses FLORES200 format for language codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translation(model, dtype, input, src_lang, tgt_lang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: (required)
        :param str dtype: (required)
        :param str input: (required)
        :param str src_lang: (required)
        :param str tgt_lang: (required)
        :return: TranslationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.translation_with_http_info(model, dtype, input, src_lang, tgt_lang, **kwargs)  # noqa: E501
        else:
            (data) = self.translation_with_http_info(model, dtype, input, src_lang, tgt_lang, **kwargs)  # noqa: E501
            return data

    def translation_with_http_info(self, model, dtype, input, src_lang, tgt_lang, **kwargs):  # noqa: E501
        """Translation  # noqa: E501

        Translate text between 200+ languages using NLLB models. Uses FLORES200 format for language codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translation_with_http_info(model, dtype, input, src_lang, tgt_lang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: (required)
        :param str dtype: (required)
        :param str input: (required)
        :param str src_lang: (required)
        :param str tgt_lang: (required)
        :return: TranslationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'dtype', 'input', 'src_lang', 'tgt_lang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `translation`")  # noqa: E501
        # verify the required parameter 'dtype' is set
        if ('dtype' not in params or
                params['dtype'] is None):
            raise ValueError("Missing the required parameter `dtype` when calling `translation`")  # noqa: E501
        # verify the required parameter 'input' is set
        if ('input' not in params or
                params['input'] is None):
            raise ValueError("Missing the required parameter `input` when calling `translation`")  # noqa: E501
        # verify the required parameter 'src_lang' is set
        if ('src_lang' not in params or
                params['src_lang'] is None):
            raise ValueError("Missing the required parameter `src_lang` when calling `translation`")  # noqa: E501
        # verify the required parameter 'tgt_lang' is set
        if ('tgt_lang' not in params or
                params['tgt_lang'] is None):
            raise ValueError("Missing the required parameter `tgt_lang` when calling `translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'dtype' in params:
            form_params.append(('dtype', params['dtype']))  # noqa: E501
        if 'input' in params:
            form_params.append(('input', params['input']))  # noqa: E501
        if 'src_lang' in params:
            form_params.append(('srcLang', params['src_lang']))  # noqa: E501
        if 'tgt_lang' in params:
            form_params.append(('tgtLang', params['tgt_lang']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/translation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
