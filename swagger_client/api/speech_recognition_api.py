# coding: utf-8

"""
    Woolball AI Network API

    **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SpeechRecognitionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def speech_to_text(self, model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, **kwargs):  # noqa: E501
        """Speech Recognition (Speech-to-Text)  # noqa: E501

        Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.speech_to_text(model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: (required)
        :param str dtype: (required)
        :param object input: (required)
        :param str return_timestamps: (required)
        :param bool stream: (required)
        :param int chunk_length_s: (required)
        :param int stride_length_s: (required)
        :param bool force_full_sequences: (required)
        :param str language: (required)
        :param str task: (required)
        :param int num_frames: (required)
        :return: list[STTChunk]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.speech_to_text_with_http_info(model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, **kwargs)  # noqa: E501
        else:
            (data) = self.speech_to_text_with_http_info(model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, **kwargs)  # noqa: E501
            return data

    def speech_to_text_with_http_info(self, model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, **kwargs):  # noqa: E501
        """Speech Recognition (Speech-to-Text)  # noqa: E501

        Convert audio files to text using Whisper models. Supports MP3, WAV, M4A and other audio formats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.speech_to_text_with_http_info(model, dtype, input, return_timestamps, stream, chunk_length_s, stride_length_s, force_full_sequences, language, task, num_frames, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: (required)
        :param str dtype: (required)
        :param object input: (required)
        :param str return_timestamps: (required)
        :param bool stream: (required)
        :param int chunk_length_s: (required)
        :param int stride_length_s: (required)
        :param bool force_full_sequences: (required)
        :param str language: (required)
        :param str task: (required)
        :param int num_frames: (required)
        :return: list[STTChunk]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'dtype', 'input', 'return_timestamps', 'stream', 'chunk_length_s', 'stride_length_s', 'force_full_sequences', 'language', 'task', 'num_frames']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method speech_to_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'dtype' is set
        if ('dtype' not in params or
                params['dtype'] is None):
            raise ValueError("Missing the required parameter `dtype` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'input' is set
        if ('input' not in params or
                params['input'] is None):
            raise ValueError("Missing the required parameter `input` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'return_timestamps' is set
        if ('return_timestamps' not in params or
                params['return_timestamps'] is None):
            raise ValueError("Missing the required parameter `return_timestamps` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'stream' is set
        if ('stream' not in params or
                params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'chunk_length_s' is set
        if ('chunk_length_s' not in params or
                params['chunk_length_s'] is None):
            raise ValueError("Missing the required parameter `chunk_length_s` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'stride_length_s' is set
        if ('stride_length_s' not in params or
                params['stride_length_s'] is None):
            raise ValueError("Missing the required parameter `stride_length_s` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'force_full_sequences' is set
        if ('force_full_sequences' not in params or
                params['force_full_sequences'] is None):
            raise ValueError("Missing the required parameter `force_full_sequences` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'task' is set
        if ('task' not in params or
                params['task'] is None):
            raise ValueError("Missing the required parameter `task` when calling `speech_to_text`")  # noqa: E501
        # verify the required parameter 'num_frames' is set
        if ('num_frames' not in params or
                params['num_frames'] is None):
            raise ValueError("Missing the required parameter `num_frames` when calling `speech_to_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'dtype' in params:
            form_params.append(('dtype', params['dtype']))  # noqa: E501
        if 'input' in params:
            form_params.append(('input', params['input']))  # noqa: E501
        if 'return_timestamps' in params:
            form_params.append(('return_timestamps', params['return_timestamps']))  # noqa: E501
        if 'stream' in params:
            form_params.append(('stream', params['stream']))  # noqa: E501
        if 'chunk_length_s' in params:
            form_params.append(('chunk_length_s', params['chunk_length_s']))  # noqa: E501
        if 'stride_length_s' in params:
            form_params.append(('stride_length_s', params['stride_length_s']))  # noqa: E501
        if 'force_full_sequences' in params:
            form_params.append(('force_full_sequences', params['force_full_sequences']))  # noqa: E501
        if 'language' in params:
            form_params.append(('language', params['language']))  # noqa: E501
        if 'task' in params:
            form_params.append(('task', params['task']))  # noqa: E501
        if 'num_frames' in params:
            form_params.append(('num_frames', params['num_frames']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/speech-recognition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[STTChunk]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
